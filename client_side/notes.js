// هادي ملاحظات بنستخلصها من كل مشروع 
// 1--- bootstrap gutters  اهم ملاحظة الا وهي ال 
// -- بين الكولومس  gap هلقيت كيف بدي تخلي مسافة بين الكاردس او كيف بدك تعمل 

// بتنضاف للكولومس يعني شوف صديقي العزيز  padding الجاب هما عبارة عن 

<div className='row gx-3'>


    {/* هان هتلاقي معمول للكول شوية بادينج */}
    <div className='col-4' > 
        {/* كونتنت الكولوم بيكون في الداخل يا وحش  */}
        <div className='card' style={{backgroundColor:"red" , height:"100px" }}>
        </div>
    </div>
    {/* ممنوع يكون اي كلاس جنب الكولم هان بالمرة ممنوع */}
    <div className='col-8' >
        <div className='card ' style={{backgroundColor:"black" , height:"100px"}}>
        </div>
    </div>




</div>


// row 
//  ----- col-4 inside it card 
//  ----- col-8 inside it card 

// col-4.card.products_card (false) the gutter will not appearing
// col-4 >> card.products_card (True) the gutter will apear



// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================



// توضحيات :
// export const name = createAsyncThunk('type or any name you want ', async func) 

// async (argument , thunkAPI)  
// argument >> is the payload you pass to the action creator
// thunkAPI >> is an object that contains some useful methods :
//          1. dispatch >> to dispatch another actions form thunk
//          2. getState >> to get the current state of the store
//          3. rejectWithValue >> to reject the action with a value
//          4. signal , extra >> advanced usage


// async () =>{
//     try{

//     }catch(error){
//         return thunkAPI.rejectWithValue(error.response.data)
//     }

// }

// =============================================================
// =============================================================
// =============================================================
// 1-
// sync متزامن يعني بينفذ الكود سطر ورا سطر ولا ينتقل الى سطر اخر حتى انتهاء السابق
// async جاهز async فيه settimeout غير متزامن يعني يعني يخلي الكود يشتغل والكود الي بياخد وقت يخليه يشتغل في الخلفية  ومن اشهر استخدامتها

// 2- 
// promises  :  fullfiled  rejected , pending  هو عبارة عن وعد وبيعتمد على تتبع عملية غير متزامنة ويمكن ان تكون حالتها 

    var loading = false 
    const myPromise = new Promise((resolve, reject) => {
        setTimeout(() => {
            
            // pending 
                setloading(true)

                
            resolve("تم بنجاح");
            // أو: reject("صار خطأ");
        }, 2000);
    });
    
    // fullfilled
    myPromise.then((result) => { 
        setloading(false)

            console.log(result); // "تم بنجاح"
        })
        // rejected
        .catch((error) => {
        setloading(false)

          console.log(error); // "صار خطأ"
        });


// 3-
// ======= async - await  هادا نظام قديم هلقيت صار استعمال افضل باستعمال 
//  rejected , fullfilled  >> باستعمال Try-catch
// loading >> لعب على الفانكشن
async function getProducts() {  // async : يعني فانكشن غير متزامنة وبدي اديرها باستخدام بروميس لكن بنظام جديد 
    setloading(true)
  try {  
    const response = await axios.get('/api/products');  // await : هتشتغل اثناء تنفيذ الريكوست  async func حتى انتهاء الفيتش لكن الاسطر الي خارج ال async يعني اصبر ما تنزلش في الكود داخل فانكشن ال
    console.log(response.data); // قبله await ويوجد  async and in try مش هيتنفذ الا بعد انتهاء الفانكشن لانه داخل فانكشن 
  } catch (error) {
    console.log(error);
  }
}
console.log("test")  // هيتنفذ اثناء الريكوست ويتنفذ الي بعديها كمان

// 4- مصطلحات مهمة وتوضيح بعض الامور

// https://www.youtube.com/watch?v=eiC58R16hb8




// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// ==============================================================================
// Cors - cross orgin resource sharing
// هي عبارة عن سياسة امان في المتصفح تمنع المواقع من الوصول الى موارد مواقع اخرى

// فش كروس لانك على نفس السيرفر بتبعت وبتستقبل من نفس الدومين  cross orgin لو عملت ريكوست على الباك اند من نفس الدومين يعني لوكنت رابط المشروعين على نفس الدومين مش هيعمل اي مشكلة لانه نفس الريسورس ومش هيعتبر 
// فعشان هيك احنا بنستخدم هادي الحماية عشان نحدد المواقع الي بتقدر تبعت ريكوستات على السيرفر  cross orgin لكن لو كان عندك موقع فرونت شغال على دومين معين وموقع باك اند شغال على دومين اخر بيصير الكروس 
// طيب ايش الهدف منها ؟؟ 
// في مواقع بتدخلها مثلا بتضغط زر ملهوش اي علاقة بايشي معين  الموقع بيخليك تعمل ريكوست على موقع مشهور زي البنك او حاجة زي كدا
// من خلال انها تخلي فقط دومين الفرونت الخاص بالموقع الي يعمل ريكوست cors فحماية البنك بتحل هادي المشكلة بال

// ✅ كيف يحل CORS المشكلة؟
// المتصفح يرسل طلب OPTIONS (preflight) قبل تنفيذ الطلب الفعلي.
// إذا رد الباكند بهيدر يحدد أن هذا الدومين مسموح له → يتم تنفيذ الطلب.
// إذا لم يرد أو لم يسمح → يتم حظر الطلب من المتصفح مباشرة.


// INSTALLED_APPS = [
//     'corsheaders',
//     ...
// ]

// MIDDLEWARE = [
//     'corsheaders.middleware.CorsMiddleware',
//     'django.middleware.common.CommonMiddleware',
//     ...
// ]

// CORS_ALLOWED_ORIGINS = [
//     "http://localhost:3000",
// ]
